<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- ex) 패키지라는 것을 통해서 같은 class명을 다른 패키지에 쓸 수 있다. -->
<!-- 쿼리 아이디가 중복될 수 있다. 이걸 막는 방법이 namespace == 패키지와 비슷한 역할 -->
<mapper namespace="memberTest"> 

<!-- 

	이 영역에 SQL문에 맞는 태그를 사용하여 SQL문을 기술한다.
	
	사용할 수 있는 기본적인 태그들
	
	<select> ~~~ </select>
	<insert> ~~~ </insert>
	<update> ~~~ </update>
	<delete> ~~~ </delete>

	위 태그에서 사용되는 속성들
	
	1) id속성 : 해당 태그를 호출할 때 <mapper> 태그의 namespace와 연결하여 사용하는 이름.
	2) parameterType 속성 : SQL문에 사용될 데이터가 들어있는 객체타입 지정
						  (보통 VO클래스, 자바의 자료형이름 등이 사용됨.)
						  (typeAlias로 지정한 alias명을 사용할 수 있다.)
	3) resultType 속성 : selete문을 실행한 결과를 담을 객체타입을 지정한다.
					      (보통 VO클래스, 자바의 자료형이름 등이 사용됨.)
					      (typeAlias로 지정한 alias명을 사용할 수 있다.)
	4) resultMap 속성 : 결과 레코드 컬럼명과 VO객체의 property명이 다를 경우에 적절한 매핑을 위해 사용한다.				     						  
	
 -->
	<!-- 클래스 이름을 쓸때는 팩터리까지 다 써야한다. -->
	<insert id="insertMember" parameterType="kr.or.ddit.member.vo.MemberVO">
	
		insert into mymember
		(MEM_ID, MEM_NAME, MEM_TEL, MEM_ADDR, REG_DT)
		<!-- mv.getMemId()라는게 메소드가 있을것이다 하고 -->
		<!-- #{memId}에 가져온다. -->
		<!-- 리플레이스가 된다. 대체한다. -->
		values (#{memId}, #{memName}, #{memTel}, #{memAddr}, sysdate)
	
	</insert>
	
	<update id="updateMember" parameterType="kr.or.ddit.member.vo.MemberVO">
	
		UPDATE MYMEMBER
		SET MEM_NAME = #{memName},
		MEM_TEL = #{memTel},
	    MEM_ADDR = #{memAddr}
		WHERE MEM_ID = #{memId}
	
	</update>

</mapper>