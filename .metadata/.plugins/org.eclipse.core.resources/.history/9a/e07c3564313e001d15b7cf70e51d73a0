package kr.or.ddit.basic;

import java.util.ArrayList;
import java.util.List;

public class T04WildCardTest {
/*
 * 와일드 카드에 대하여...
 * 
 * 와일드카드(?)는 제너릭 타입을 이용한 타입 안전한 코딩을 위해 사용되는 
 * 특별한 종류의 인수(Argument)로서 변수선언, 객체생성 및 메서드 정의할 때 사용된다.
 * 	(제너릭 타입 선언시에는 사용할 수 없다)
 * 
 * <? extends T> => 와일드 카드의 상한 제한. T와 그 자손들만 가능.
 * <? super T> => 와일드 카드의 하한 제한. T와 그 조상들만 가능.
 * <?>         => 허용가능한 모든 타입이 가능.
 * 
 * 제너릭이 있는 와일드카드는 없다.
 * 타입이 제너릭해??? -> 무슨 타입인지 모른다.
 * 
 * 앞에 쓴 객체중에 p1이라는 변수가 Pair객체의 타입이 어떤 타입인지 상관 없다는 뜻이다.
 * 와일드카드를 썼다는 건 제너릭 클래스를 사용 했다는 뜻이기도 하다.
 * Pair<?, ?> p1 = new Pair<Integer, String>(1, "홍길동");
 */
	
	public static void main(String[] args) {
		
		// List는 제너릭 인터페이스였다.!
		// strList의 변수는 List의 타입이기만 하면 된다.
		// ArrayList<> <-안에 String이 들어가도 되고 Number가 들어가도 된다.
		List<?> strList = new ArrayList<Integer>();
		
		
		
		
		
		
		
	}
}

// 과일
class Fruit{
	private String name; // 과일 이름

	public Fruit(String name) {
		super();
		this.name = name;
	}

	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	
}